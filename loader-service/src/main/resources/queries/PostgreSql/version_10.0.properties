metadata.query.table=SELECT nc.nspname AS parent_object_id, c.relname AS name, \
  concat_ws('.', nc.nspname, c.relname) as current_object_id, \
  CASE WHEN t.typname IS NOT NULL THEN  1 ELSE 0 END AS is_typed_table \
  FROM ((pg_namespace nc JOIN pg_class c ON ((nc.oid = c.relnamespace))) \
  LEFT JOIN (pg_type t JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((c.reloftype = t.oid))) \
  WHERE (NOT pg_is_other_temp_schema(nc.oid)) \
  AND c.oid NOT IN (select inhrelid from pg_inherits) AND c.relkind IN ('r', 'p') \
  AND current_database() = ? AND nc.nspname = ?
metadata.query.sequence=SELECT \
        nc.nspname as parent_object_id, \
        c.relname AS current_object_id, \
        false as is_udt, \
        c.relname AS name, \
        'bigint'::character varying AS type_name, \
        p.start_value AS start_value, \
        p.minimum_value AS minimum_value, \
        p.maximum_value AS character_maximum_length, \
        p.increment AS increment, \
        64::information_schema.cardinal_number AS numeric_precision, \
        0::information_schema.cardinal_number AS numeric_scale, \
        CASE WHEN (CASE WHEN p.cycle_option THEN 'YES'::text ELSE 'NO'::text END) = 'YES' THEN true ELSE false END as cycle_option \
        ,false as cache_flag \
        ,null as cache_size \
        ,null as last_value \
    FROM    pg_namespace nc, \
        pg_class c, \
        LATERAL pg_sequence_parameters(c.oid) p(start_value, minimum_value, maximum_value, increment, cycle_option) \
    where (c.relnamespace = nc.oid) AND (c.relkind = 'S'::"char") AND (NOT pg_is_other_temp_schema(nc.oid)) \
        and current_database() = ? \
        and nc.nspname = ?
metadata.query.partition=SELECT \
        concat_ws('.', ns.nspname, pc1.relname) AS parent_object_id, \
        pc.oid AS current_object_id, \
        pc.relname AS name, \
        substring(pg_get_partkeydef(pi.inhparent), 1, position(' ' IN pg_get_partkeydef(pi.inhparent))-1) AS partition_type, \
        trim('()' from substring(pg_get_partkeydef(pi.inhparent), position(' ' IN pg_get_partkeydef(pi.inhparent))+2, length(pg_get_partkeydef(pi.inhparent)))) AS partition_columns, \
        pg_get_partition_constraintdef(pc.oid) AS text \
    FROM pg_class pc \
        JOIN pg_inherits pi ON pi.inhrelid = pc.oid \
        JOIN pg_class pc1 ON pi.inhparent = pc1.oid \
        JOIN pg_partitioned_table ppt ON ppt.partrelid = pi.inhparent \
        JOIN pg_namespace ns ON ns.oid = pc.relnamespace \
    WHERE pc.relispartition \
        AND NOT EXISTS \
        ( \
        SELECT 1 \
        FROM pg_class pcs \
        WHERE pcs.relispartition \
        AND pcs.oid = pi.inhparent \
        ) \
        and current_database() = ?  \
        AND ns.nspname = ?  \
        AND pc1.relname = ?