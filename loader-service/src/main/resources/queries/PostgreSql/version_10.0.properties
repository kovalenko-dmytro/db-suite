metadata.query.table=SELECT nc.nspname AS parent_object_id, c.relname AS name, \
  concat_ws('.', nc.nspname, c.relname) as current_object_id, \
  CASE WHEN t.typname IS NOT NULL THEN  1 ELSE 0 END AS is_typed_table \
  FROM ((pg_namespace nc JOIN pg_class c ON ((nc.oid = c.relnamespace))) \
  LEFT JOIN (pg_type t JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON ((c.reloftype = t.oid))) \
  WHERE (NOT pg_is_other_temp_schema(nc.oid)) \
  AND c.oid NOT IN (select inhrelid from pg_inherits) AND c.relkind IN ('r', 'p') \
  AND current_database() = ? AND nc.nspname = ?
metadata.query.sequence=SELECT \
        nc.nspname as parent_object_id, \
        c.relname AS current_object_id, \
        false as is_udt, \
        c.relname AS name, \
        'bigint'::character varying AS type_name, \
        p.start_value AS start_value, \
        p.minimum_value AS minimum_value, \
        p.maximum_value AS character_maximum_length, \
        p.increment AS increment, \
        64::information_schema.cardinal_number AS numeric_precision, \
        0::information_schema.cardinal_number AS numeric_scale, \
        CASE WHEN (CASE WHEN p.cycle_option THEN 'YES'::text ELSE 'NO'::text END) = 'YES' THEN true ELSE false END as cycle_option \
        ,false as cache_flag \
        ,null as cache_size \
        ,null as last_value \
    FROM    pg_namespace nc, \
        pg_class c, \
        LATERAL pg_sequence_parameters(c.oid) p(start_value, minimum_value, maximum_value, increment, cycle_option) \
    where (c.relnamespace = nc.oid) AND (c.relkind = 'S'::"char") AND (NOT pg_is_other_temp_schema(nc.oid)) \
        and current_database() = ? \
        and nc.nspname = ?
metadata.query.partition=SELECT \
        concat_ws('.', ns.nspname, pc1.relname) AS parent_object_id, \
        pc.oid AS current_object_id, \
        pc.relname AS name, \
        substring(pg_get_partkeydef(pi.inhparent), 1, position(' ' IN pg_get_partkeydef(pi.inhparent))-1) AS partition_type, \
        trim('()' from substring(pg_get_partkeydef(pi.inhparent), position(' ' IN pg_get_partkeydef(pi.inhparent))+2, length(pg_get_partkeydef(pi.inhparent)))) AS partition_columns, \
        pg_get_partition_constraintdef(pc.oid) AS text \
    FROM pg_class pc \
        JOIN pg_inherits pi ON pi.inhrelid = pc.oid \
        JOIN pg_class pc1 ON pi.inhparent = pc1.oid \
        JOIN pg_partitioned_table ppt ON ppt.partrelid = pi.inhparent \
        JOIN pg_namespace ns ON ns.oid = pc.relnamespace \
    WHERE pc.relispartition \
        AND NOT EXISTS \
        ( \
        SELECT 1 \
        FROM pg_class pcs \
        WHERE pcs.relispartition \
        AND pcs.oid = pi.inhparent \
        ) \
        and current_database() = ?  \
        AND ns.nspname = ?  \
        AND pc1.relname = ?
metadata.query.column=select  \
m.parent_object_id,  \
m.table_name,  \
m.name,  \
m.current_object_id,  \
m.database,  \
case when coalesce(m.domain_schema, m.udt_schema) is not null  \
then m.typname  \
when strpos(m.displaytypname_full, '(')>0 and strpos(m.displaytypname_full, ')')>0 then  \
CONCAT(left(m.displaytypname_full, strpos(m.displaytypname_full, '(')-1), right(m.displaytypname_full, length(m.displaytypname_full) - strpos(m.displaytypname_full, ')')))  \
else m.displaytypname_full  \
end type_name,  \
m.typname  as type_name_alias,  \
m.character_maximum_length,  \
coalesce(m.numeric_precision) as numeric_precision,  \
m.numeric_scale, m.is_identity,  \
case when m.table_type = 'BASE TABLE' then m.is_nullable else null end as is_nullable,  \
case when coalesce(m.domain_schema, m.udt_schema) is null then false else true end as is_udt,  \
m.domain_schema, m.udt_schema,  \
m.is_generated, m.identity_option, m.column_default, m.ordinal_position, m.collation_name, m.minimum_value, m.increment  \
from  \
( select  \
c.table_name  \
, c.domain_schema  \
, CASE WHEN c.udt_schema NOT IN ('pg_catalog') THEN  c.udt_schema ELSE NULL END AS udt_schema  \
, c.column_name as name  \
, CONCAT_WS('.', c.table_schema, c.table_name) as parent_object_id  \
, CONCAT_WS('.', c.table_schema, c.table_name, c.column_name) as current_object_id  \
, current_database() as database  \
, replace(format_type(pg.oid,pg.atttypmod), coalesce(coalesce(c.domain_schema, c.udt_schema), '')||'.','') AS displaytypname_full  \
, pg.typname  \
, coalesce(c.character_maximum_length, pg.character_maximum_length) as character_maximum_length  \
, coalesce(c.numeric_precision, pg.numeric_precision, c.datetime_precision) as numeric_precision  \
, coalesce(c.numeric_scale, pg.numeric_scale) as numeric_scale  \
, case when c.is_identity= 'NO' then false  \
else true  \
end as is_identity  \
, case when c.is_nullable= 'NO' then false  \
else true  \
end as is_nullable  \
, is_generated  \
, identity_option  \
, c.column_default  \
, c.ordinal_position  \
, collation_name  \
, seq.minimum_value::Decimal   \
, seq.increment::Decimal   \
, c.table_catalog  \
, c.table_schema  \
, (SELECT CASE  \
WHEN (nc.oid = pg_my_temp_schema()) THEN 'LOCAL TEMPORARY'::text  \
WHEN (cc.relkind = 'r'::"char") THEN 'BASE TABLE'::text  \
WHEN(cc.relkind = 'v'::"char") THEN 'VIEW'::text  \
WHEN(cc.relkind = 'f'::"char") THEN 'FOREIGN TABLE'::text  \
ELSE NULL::text  \
END AS table_type  \
FROM pg_namespace nc  \
JOIN pg_class cc ON nc.oid = cc.relnamespace  \
WHERE cc.relkind = ANY(ARRAY['r'::"char", 'v'::"char", 'f'::"char"])  \
AND NOT pg_is_other_temp_schema(nc.oid)  \
AND current_database()= c.table_catalog  \
AND nc.nspname= c.table_schema  \
AND cc.relname= c.table_name) table_type  \
from  \
(  \
SELECT (current_database())::information_schema.sql_identifier AS table_catalog,  \
(nc.nspname)::information_schema.sql_identifier AS table_schema,  \
(c.relname)::information_schema.sql_identifier AS table_name,  \
(a.attname)::information_schema.sql_identifier AS column_name,  \
(a.attnum)::information_schema.cardinal_number AS ordinal_position,  \
(pg_get_expr(ad.adbin, ad.adrelid))::information_schema.character_data AS column_default,  \
(  \
CASE  \
WHEN (a.attnotnull OR ((t.typtype = 'd'::"char") AND t.typnotnull)) THEN 'NO'::text  \
ELSE 'YES'::text  \
END)::information_schema.yes_or_no AS is_nullable,  \
(information_schema._pg_char_max_length(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS character_maximum_length,  \
(information_schema._pg_numeric_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_precision,  \
(information_schema._pg_numeric_scale(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS numeric_scale,  \
(information_schema._pg_datetime_precision(information_schema._pg_truetypid(a.*, t.*), information_schema._pg_truetypmod(a.*, t.*)))::information_schema.cardinal_number AS datetime_precision,  \
(nco.nspname)::information_schema.sql_identifier AS collation_schema,  \
(co.collname)::information_schema.sql_identifier AS collation_name,  \
(  \
CASE  \
WHEN (t.typtype = 'd'::"char") THEN nt.nspname  \
ELSE NULL::name  \
END)::information_schema.sql_identifier AS domain_schema,  \
(COALESCE(nbt.nspname, nt.nspname))::information_schema.sql_identifier AS udt_schema,  \
(  \
CASE  \
WHEN (a.attidentity = ANY(ARRAY['a'::"char", 'd'::"char"])) THEN 'YES'::text  \
ELSE 'NO'::text  \
END)::information_schema.yes_or_no AS is_identity,  \
('NEVER'::character varying)::information_schema.character_data AS is_generated,  \
CASE a.attidentity WHEN 'a' THEN 'always' WHEN 'd' THEN 'byDefault' ELSE null END as identity_option  \
FROM((((((pg_attribute a  \
LEFT JOIN pg_attrdef ad ON (((a.attrelid = ad.adrelid) AND(a.attnum = ad.adnum))))  \
JOIN(pg_class c  \
JOIN pg_namespace nc ON ((c.relnamespace = nc.oid))) ON((a.attrelid = c.oid)))  \
JOIN(pg_type t  \
JOIN pg_namespace nt ON ((t.typnamespace = nt.oid))) ON((a.atttypid = t.oid)))  \
LEFT JOIN(pg_type bt  \
JOIN pg_namespace nbt ON ((bt.typnamespace = nbt.oid))) ON(((t.typtype = 'd'::"char") AND(t.typbasetype = bt.oid))))  \
LEFT JOIN(pg_collation co  \
JOIN pg_namespace nco ON ((co.collnamespace = nco.oid))) ON(((a.attcollation = co.oid) AND((nco.nspname<> 'pg_catalog'::name) OR(co.collname<> 'default'::name)))))  \
LEFT JOIN(pg_depend dep  \
JOIN pg_sequence seq ON (((dep.classid = ('pg_class'::regclass)::oid) AND(dep.objid = seq.seqrelid) AND(dep.deptype = 'i'::"char")))) ON(((dep.refclassid = ('pg_class'::regclass)::oid) AND(dep.refobjid = c.oid) AND(dep.refobjsubid = a.attnum))))  \
WHERE((NOT pg_is_other_temp_schema(nc.oid)) AND(a.attnum > 0) AND(NOT a.attisdropped) AND(c.relkind = ANY(ARRAY['r'::"char", 'v'::"char", 'f'::"char", 'p'::"char", 'm'::"char"])))  \
) c  \
left outer join  \
(  \
select substring(tmp_seq.tmp_name_seq, tmp_seq.pos_from, tmp_seq.pos_end-tmp_seq.pos_from+1) seq_name, tmp_seq.column_default  \
,tmp_seq.table_catalog, tmp_seq.table_schema, tmp_seq.table_name, tmp_seq.column_name, tmp_sequences_schema, i_seq.*  \
from  \
(SELECT replace(pg_get_expr(ad.adbin, ad.adrelid), '""', '') tmp_name_seq,  \
case when strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), '.')>0  \
Then strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), '.')+1  \
else strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), 'nextval(')+9 end as pos_from,  \
strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), '::')-2 as pos_end,  \
pg_get_expr(ad.adbin, ad.adrelid) column_default,  \
current_database() table_catalog,  \
nc.nspname table_schema,  \
c.relname table_name,  \
a.attname column_name,  \
case when strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), '.')>0  \
Then substring(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), 10,strpos(replace(pg_get_expr(ad.adbin, ad.adrelid), '""', ''), '.')-10)  \
else nc.nspname end as tmp_sequences_schema  \
FROM(pg_attribute a LEFT JOIN pg_attrdef ad ON a.attrelid = ad.adrelid AND a.attnum = ad.adnum)  \
JOIN  \
(pg_class c JOIN pg_namespace nc ON c.relnamespace = nc.oid) ON a.attrelid = c.oid  \
WHERE (NOT pg_is_other_temp_schema(nc.oid)) AND(a.attnum > 0) AND(NOT a.attisdropped) AND(c.relkind = ANY(ARRAY['r'::"char", 'v'::"char", 'f'::"char"]))  \
AND strpos((pg_get_expr(ad.adbin, ad.adrelid)), 'nextval(') > 0  \
) tmp_seq,  \
(SELECT current_database() AS sequence_catalog,  \
nc.nspname AS sequence_schema,  \
c.relname AS sequence_name,  \
'bigint'::character varying AS data_type,  \
64::information_schema.cardinal_number AS numeric_precision,  \
2::information_schema.cardinal_number AS numeric_precision_radix,  \
0::information_schema.cardinal_number AS numeric_scale,  \
p.start_value AS start_value,  \
p.minimum_value AS minimum_value,  \
p.maximum_value AS maximum_value,  \
p.increment AS increment,  \
(CASE WHEN p.cycle_option THEN 'YES'::text ELSE 'NO'::text END) AS cycle_option  \
FROM pg_namespace nc, pg_class c,  \
LATERAL pg_sequence_parameters(c.oid) p(start_value, minimum_value, maximum_value, increment, cycle_option)  \
WHERE(c.relnamespace = nc.oid) AND(c.relkind = 'S'::"char") AND(NOT pg_is_other_temp_schema(nc.oid))  \
) i_seq  \
where substring(tmp_seq.tmp_name_seq, tmp_seq.pos_from, tmp_seq.pos_end-tmp_seq.pos_from+1)=i_seq.sequence_name  \
and i_seq.sequence_catalog = tmp_seq.table_catalog  \
and i_seq.sequence_schema = tmp_seq.tmp_sequences_schema  \
) seq on  c.table_catalog = seq.table_catalog  \
and c.table_schema = seq.table_schema  \
and c.table_name = seq.table_name  \
and c.column_name = seq.column_name  \
left outer join  \
(SELECT ty.oid, att.atttypmod,  \
ty.typname,  \
nc.nspname , pg_cl.relname, att.attname,  \
CASE WHEN ty.typname in ('int2', '_int2') THEN 16  \
WHEN ty.typname in ('int4', '_int4') THEN 32  \
WHEN ty.typname in ('int8', '_int8') THEN 64  \
WHEN ty.typname in ('numeric', '_numeric') THEN  \
CASE WHEN atttypmod = -1  \
THEN null  \
ELSE((atttypmod - 4) >> 16) & 65535  \
END  \
WHEN ty.typname in ('float4','_float4') THEN 24   \
WHEN ty.typname in ('float8','_float8') THEN 53   \
WHEN ty.typname in ('time','_time','timetz','_timetz','timestamp','_timestamp','timestamptz','_timestamptz') THEN  \
CASE WHEN atttypmod = -1  \
THEN null  \
ELSE(atttypmod - 0) & 65535  \
END  \
WHEN ty.typname in ('interval','_interval') THEN  \
CASE WHEN atttypmod<> -1  AND strpos(format_type(ty.oid, att.atttypmod), '(') > 1 AND strpos(format_type(ty.oid, att.atttypmod), ')') > 1 THEN  \
substring(format_type(ty.oid, att.atttypmod), strpos(format_type(ty.oid, att.atttypmod), '(')+1, strpos(format_type(ty.oid, att.atttypmod), ')') - strpos(format_type(ty.oid, att.atttypmod), '(') - 1 )::integer  \
ELSE null  \
END  \
ELSE null  \
END AS numeric_precision,  \
CASE  \
WHEN ty.typname in ('int2', '_int2', 'int4', '_int4', 'int8', '_int8') THEN 0  \
WHEN ty.typname in ('numeric', '_numeric') THEN  \
CASE  \
WHEN atttypmod = -1 THEN null  \
ELSE(atttypmod - 4) & 65535  \
END  \
ELSE null  \
END AS numeric_scale,  \
CASE  \
WHEN ty.typname in ('char', '_char', 'varchar', '_varchar', 'bpchar', '_bpchar') THEN  \
CASE  \
WHEN atttypmod = -1 THEN null  \
ELSE(atttypmod - 4) & 65535  \
END  \
WHEN ty.typname in ('bit', '_bit', 'varbit', '_varbit') THEN  \
CASE  \
WHEN atttypmod = -1 THEN null  \
ELSE(atttypmod - 0) & 65535  \
END  \
ELSE null  \
END AS character_maximum_length  \
FROM pg_attribute att  \
JOIN pg_type ty ON ty.oid=atttypid  \
LEFT JOIN pg_class pg_cl ON pg_cl.oid = att.attrelid  \
LEFT JOIN pg_namespace nc ON pg_cl.relnamespace = nc.oid  \
WHERE att.attnum > 0  \
AND att.attisdropped IS FALSE  \
) pg on pg.nspname = c.table_schema AND pg.relname = c.table_name AND pg.attname= c.column_name  \
WHERE  \
c.table_schema = ?  \
AND c.table_name = ?  \
)as  m