metadata.query.parameter=select * from (      \
select      \
concat_ws('.', prc.pronamespace, prc.oid) as parent_object_id,       \
concat_ws('.', prc.pronamespace, prc.oid, prm.ordinal_position) as current_object_id      \
,sch.nspname            as schema_name      \
,prc.proname            as function_name      \
,prm.parameter_name     as name      \
,prm.parameter_name IS NULL as is_no_name      \
,false 			            as is_returns      \
,case when prm.udt_name in ('int2vector', 'oidvector') and prm.data_type='ARRAY' then prm.udt_name      \
when prm.udt_name in ('_int2vector', '_oidvector') and prm.data_type='ARRAY' then concat(substring(prm.udt_name from 2),'[]')      \
when prm.data_type<>'ARRAY' then      \
case when prm.data_type = 'USER-DEFINED' then prm.udt_name else prm.data_type end      \
else concat(coalesce(      \
(SELECT      \
CASE WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text      \
WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer) ELSE 'USER-DEFINED'::text      \
END AS data_type         \
FROM pg_type t,      \
pg_namespace nt      \
WHERE t.typnamespace = nt.oid      \
AND concat('_',t.typname) = prm.udt_name limit 1), prm.data_type),'[]')	                                            \
end as type_name      \
,prm.parameter_mode     as argument_mode      \
,prm.ordinal_position   as argument_order      \
, case when prm.data_type = 'USER-DEFINED' then prm.udt_schema else null end as domain_schema      \
, case when prm.data_type = 'USER-DEFINED' then true else false end as is_udt      \
, current_database() as database      \
,prm.parameter_default  as parameter_default       \
from pg_proc as prc      \
join (      \
select *      \
,((((ss.proname)::text || '_'::text) || (ss.p_oid)::text))::information_schema.sql_identifier AS specific_name      \
,(NULLIF(ss.proargnames[(ss.x).n], ''::text))::information_schema.sql_identifier AS parameter_name      \
,((ss.x).n)::information_schema.cardinal_number AS ordinal_position      \
,(CASE      \
WHEN ((t.typelem <> (0)::oid) AND (t.typlen = '-1'::integer)) THEN 'ARRAY'::text      \
WHEN (nt.nspname = 'pg_catalog'::name) THEN format_type(t.oid, NULL::integer)      \
ELSE 'USER-DEFINED'::text      \
END)::information_schema.character_data AS data_type      \
,(nt.nspname)::information_schema.sql_identifier AS udt_schema      \
,(t.typname)::information_schema.sql_identifier as udt_name      \
,(CASE      \
WHEN (ss.proargmodes IS NULL) THEN 'IN'::text      \
WHEN (ss.proargmodes[(ss.x).n] = 'i'::"char") THEN 'IN'::text      \
WHEN(ss.proargmodes[(ss.x).n] = 'o'::"char") THEN 'OUT'::text      \
WHEN(ss.proargmodes[(ss.x).n] = 'b'::"char") THEN 'INOUT'::text      \
WHEN(ss.proargmodes[(ss.x).n] = 'v'::"char") THEN 'IN'::text      \
WHEN(ss.proargmodes[(ss.x).n] = 't'::"char") THEN 'TABLE'::text      \
ELSE NULL::text      \
END)::information_schema.character_data AS parameter_mode      \
,pg_get_function_arg_default(ss.p_oid, (ss.x).n) AS parameter_default      \
from pg_type t,      \
pg_namespace nt,      \
( SELECT n.nspname AS n_nspname,      \
p.proname,      \
p.oid AS p_oid,      \
p.proowner,      \
p.proargnames,      \
p.proargmodes,      \
information_schema._pg_expandarray(COALESCE(p.proallargtypes, (p.proargtypes)::oid[])) AS x      \
FROM pg_namespace n,      \
pg_proc p      \
WHERE(n.oid = p.pronamespace)) ss      \
WHERE((t.oid = (ss.x).x) AND(t.typnamespace = nt.oid))) prm on prm.specific_name = concat_ws('_', prc.proname, prc.oid)      \
join pg_namespace       as sch on sch.oid = prc.pronamespace      \
where prm.parameter_mode<> 'TABLE'      \
union all      \
select      \
concat_ws('.', prc.pronamespace, prc.oid) as parent_object_id,      \
concat_ws('.', prc.pronamespace, prc.oid, '0') as current_object_id      \
,sch.nspname            as schema_names      \
,prc.proname            as function_name      \
,NULL                   as name      \
,TRUE                   as is_no_name      \
,true 			            as is_returns      \
, replace(format_type(typ.oid, null), coalesce(sch_domain.nspname, '')||'.','') AS type_name      \
,'OUT'                  as argument_mode      \
,0                      as argument_order      \
, case when sch_domain.nspname in ('pg_catalog', 'information_schema') then null else sch_domain.nspname end as domain_schema      \
, case when sch_domain.nspname in ('pg_catalog', 'information_schema') then false else true end as is_udt      \
, current_database() as database      \
,NULL			        as parameter_default       \
from pg_proc                 as prc      \
join pg_namespace       as sch on sch.oid = prc.pronamespace      \
join pg_type            as typ on typ.oid = prc.prorettype      \
join pg_namespace       as sch_domain on typ.typnamespace = sch_domain.oid      \
where prc.prorettype::regtype::text not in ('void', 'refcursor', 'record')      \
)a      \
where schema_name = ? and function_name = ?