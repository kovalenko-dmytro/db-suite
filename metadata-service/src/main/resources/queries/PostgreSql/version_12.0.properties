metadata.query.index=select *   \
from(   \
select   \
concat_ws(   \
'.',   \
(select nspname from pg_namespace where oid = i.relnamespace),   \
t.relname)   \
as parent_object_id,   \
concat_ws('.', (select nspname from pg_namespace where oid = i.relnamespace), t.relname, i.relname) as current_object_id   \
,(select nspname from pg_namespace where oid = i.relnamespace) as table_schema   \
,t.relname     as table_name   \
,i.relname     as name   \
,case when idx.indisready = 't'    \
then true    \
else false    \
end as index_is_ready   \
,am.amname     as index_type   \
,case when idx.indisclustered = 't' then true    \
else false    \
end as is_clustered   \
,case when indexprs is not null then true    \
else false    \
end as is_function_based   \
,case when COALESCE(con.contype,'1') in('p','u') then true   \
when idx.indisunique = 't' then true    \
else false    \
end as is_unique   \
,case   \
when idx.indisvalid = 't'    \
then true    \
else false    \
end as is_valid   \
,array_to_string(i.reloptions, ',') as  r_options    \
from   \
pg_index    as idx   \
inner join pg_class  as i  on i.oid  = idx.indexrelid   \
inner join (select p.*, p.oid from pg_class p)  as t  on t.oid  = idx.indrelid   \
inner join pg_am  as am on am.oid = i.relam   \
left outer join pg_constraint as con on con.conindid = idx.indexrelid and con.confrelid = 0   \
)a where is_unique = false    \
AND table_schema = ?   \
AND table_name = ?
metadata.query.index-column=select *    \
from(    \
select    \
concat_ws('.',    \
(select nspname from pg_namespace where oid = i.relnamespace),    \
t.relname,    \
i.relname) as current_object_id,    \
(    \
select nspname    \
from pg_namespace    \
where oid = i.relnamespace    \
)                                 as table_schema,    \
t.relname                        as table_name,    \
i.relname                         as index_name,    \
ser.num_column                        as order_column,    \
pg_get_indexdef(idx.indexrelid, ser.num_column, true) as name,    \
case    \
when ser.indoption[ser.k-1] & 1 = 1 then 'DESC'    \
else 'ASC'    \
end                                 as order_by,    \
case    \
when (ser.indoption[ser.k-1] & 2 = 2) then 'NULLS FIRST'    \
else 'NULLS LAST'    \
end                                 as nulls,    \
case when COALESCE(con.contype,'1') in('p','u') then true    \
else false     \
end                                 as is_unique     \
from    \
pg_index           as idx    \
inner join (    \
select ii.indexrelid as idx_id, unnest(ii.indkey) as k, ii.*, generate_subscripts(ii.indkey, 1)+1 as num_column    \
from pg_index ii    \
)                 as ser on ser.idx_id = idx.indexrelid    \
inner join pg_class         as i  on i.oid  = idx.indexrelid    \
inner join pg_class         as t  on t.oid  = idx.indrelid    \
inner join pg_am         as am on am.oid = i.relam    \
left outer join pg_constraint as con on con.conindid = idx.indexrelid and con.confrelid = 0    \
) a    \
where    \
is_unique = false     \
AND table_schema = ?    \
AND table_name = ?    \
AND index_name = ?      \
order by table_schema, table_name, index_name, order_column